doctype html
html
	head
		include ./shared/head
		link(rel="stylesheet", type="text/css", href="/dist/css/autocomplete.css")
		link(rel="stylesheet", type="text/css", href="/docs/assets/css/autocomplete.css")
	body
		include ./shared/header
		main.container
			include ./shared/info
			h2 Examples
			div.row
				div.col-sm-4
					section.panel.panel-example
						header.panel-heading
							h2.panel-title One Selection, Predefined Data.
						div.panel-body
							p
								| Bare bones Autocomplete example. You can select one result from a prefefined list of data or enter your own text.
							div.mk-ac-root
								input(
									type="text",
									class="mk-ac",
									placeholder="Movie Genres",
									name="symbol-1")
				div.col-sm-4
					section.panel.panel-example
						header.panel-heading
							h2.panel-title Four Selections
						div.panel-body
							p
								| Same setup as the last, except this time you can select up to four entries.
								| You can change the number of selections with the limit (or data-limit) config option.
							div.mk-ac-root
								input(
									type="text",
									class="mk-ac",
									placeholder="Movie Genres",
									name="symbol-2",
									data-limit="4")

				div.col-sm-4
					section.panel.panel-example
						header.panel-heading
							h2.panel-title Categories &amp; Headers
						div.panel-body
							p
								| To use categories, your data must be an array of objects with a 'label' and 'items' property. The 'items' is an array of results the user can select from and each result must contain at least a 'label' and 'value' property.
							div.mk-ac-root#categories
								input(
									type="text",
									class="mk-ac",
									placeholder="Movie Genres",
									name="symbol-3",
									data-limit="4")
			div.row
				div.col-sm-4
					section.panel.panel-example
						header.panel-heading
							h2.panel-title Remote URLs
						div.panel-body
							p
								| Same setup as the last (up to four total entires) but this time we're hitting a remote endpoint for data.
								| You can achieve remote/xhr ability by hooking into the request events (see Events Section).
							div.mk-ac-root#remote
								input(
									type="text",
									class="mk-ac",
									placeholder="Search for a symbol",
									name="symbol-4",
									data-limit="4")
				div.col-sm-4
					section.panel.panel-example
						header.panel-heading
							h2.panel-title Comma Seperate
						div.panel-body
							p
								| Add the ability to split user entires by comma and enter those values into the selections stack with the comma (or data-comma) config option.
							div.mk-ac-root
								input(
									type="text",
									class="mk-ac",
									placeholder="Movie Genres",
									name="symbol-5",
									data-limit="4",
									data-comma="true")
				div.col-sm-4
					section.panel.panel-example
						header.panel-heading
							h2.panel-title Only Allow Result Selections
						div.panel-body
							p
								| Retstrict users to only select results from the result list and NOT enter anything they choose with the anything (or data-anything) config attribute.
							div.mk-ac-root
								input(
									type="text",
									class="mk-ac",
									placeholder="Movie Genres",
									name="symbol-6",
									data-limit="4",
									data-anything="false")
				div.col-sm-4
					section.panel.panel-example
						header.panel-heading
							h2.panel-title Removed Tag UI
						div.panel-body
							p
								| Remote the tag interface easily. Just set the notags (or data-notags) config option to true.
							div.mk-ac-root
								input(
									type="text",
									class="mk-ac",
									placeholder="Movie Genres",
									name="symbol-7",
									data-comma="true",
									data-notags="true")
			h2 Setup
			pre
				code.language-html
					| &lt;div class="mk-ac-root"&gt;
					|	&lt;input type="text" name="search" aria-label="Search for Stuff" placeholder="Search..." /&gt;
					| &lt;/div&gt;
			h3 Configuration Options via Data-Attributes
			p
				| There are two ways to configure Autocomplete, the first of which is by providing data attributes on the root input.
				| Below is a list of all possible data attributes you may add to configure an instance. All data attributes are optional.
			pre
				code.language-html
					| &lt;div class="mk-ac-root"&gt;
					|	&lt;input type="text"
					|		name="search"
					|		aria-label="Search for Stuff"
					|		&lt;!-- Number of characters before filtering/requesting data. Default is 1. --&gt;
					|		data-chars="3"
					|		&lt;!-- time in milliseconds for a data request to kick off after user entry. Default is 300. --&gt;
					|		data-time="500"
					|		&lt;!-- total number of possible results a user can select. Default is 1. --&gt;
					|		data-limit="4"
					|		&lt;!-- Allow the user to enter, or 'select,' anything they like, including their own input. Default is true. --&gt;
					|		data-anything="true"
					|		&lt;!-- Allows commas to seperate user entered values and add them to the selection list. Default is false. --&gt;
					|		data-comma="true"
					|		&lt;!-- Remove the tag UI. Default is false. --&gt;
					|		data-notags="false"
					|		&lt;!-- Allows delete (when text entry is '') to pop the last selected items from selections. --&gt;
					|		&lt;!-- Default is false for single select and true for more than one (limit &gt; 1). --&gt;
					|		data-doubledelete="true"
					|		&lt;!-- Search values as well as labels. Default is true. --&gt;
					|		data-searchvalues="false"
					|		placeholder="Search..." /&gt;
					| &lt;/div&gt;

			h2 Instantiation
			p
				| Below is an example of instantiating an Autocomplete.
				| Like all other Mk components, the first argument is the root and the second is configuration options.
				| In the example below, we've provided all possible config options, however, all config properties are completely optional.
			pre
				code.language-javascript
					| //get autocomplete object
					| var Autocomplete = Mk.get('Autocomplete');
					| //
					| //create instance
					| var autocomplete = new Autocomplete('#selector', {
					|	//number of selections user is allowed. Default is 1
					|	limit: 1,
					|	//number of characters typed by user before kicking off a request/search. Default is 1
					|	chars: 3,
					|	//delay before trigering request events for data. Default is 300.
					|	time: 500,
					|	//allow the user to input/select anything (including anything they enter manually) Default is true.
					|	anything: true,
					|	//allows the doubledelete functionality to pop old selections. Default is true.
					|	doubledelete: false,
					|	//allows searching values as well as labels. Default is true.
					|	searchvalues: false,
					|	//hide the tag UI. Default is false.
					|	notags: false,
					|	//allow comma seperated user input to be split and added to selections. Default is false.
					|	comma: true,
					|	//data you would like to provide on instantiation (vs. remote requests).
					|	//you can also do both static and remote data.
					|	data: [
					|		..predefined data set..
					|		{
					|			label: 'Example Result 1',
					|			value: 'my-result-key'
					|		}
					|	],
					|	//template overrides/additions
					|	templates: {
					|		..template overrides..
					|	},
					|	//format overrides/additions
					|	formats: {
					|		..format overrides..
					| 	},
					|	//events you want bound
					|	events: {
					|		..you can bind events here or by using on() one() and off()..
					|	}
					| });

			h2 Dynamic Data and Remote Urls
			p
				| Autocomplete does not take care of XMLHttpRequests, JSONP, or any other method of retrieving dynamic data to populate a users search.
				| We do, however, provide the proper hooks for you to tie your own custom requests into the Autocomplete.
				| This is actually great news. Now you can use whatever existing tools for remote requests your project is already using.
				| Below is an example of a JSONP call using jQuery, which hooks into the Autocomplete system.
			pre
				code.language-javascript
					| //get the autocomplete object
					| var Autocomplete = Mk.get('Autocomplete');
					| //
					| //create an instance
					| var autocomplete = new Autocomplete('.mk-ac-root' /*, options */);
					| //will keep refernece to our ajax request
					| var xhr;
					| //
					| // set the request.send and request.abort events
					| autocomplete.on('request.send', function (query, requestnum) {
					|	//
					| 	//you can use the 'requestnum'
					|	//to catch situations where an abort() procedure isn't possible.
					|	//see the success method for more info
					| 	xhr = $.ajax({
					|		url: 'http://dev.markitondemand.com/Api/v2/Lookup/jsonp',
					|		data: {input: query},
					|		type: 'get',
					|		dataType: 'jsonp',
					|		success: function (data) {
					|			//
					|			//requests is a number keeping track of the current request count.
					|			//you can use that to check if a request is 'stale' and leave or abort an old request.
					|			if (autocomplete.requests &gt; requestnum) {
					|				//exit, we have a more current request coming
					|				return;
					|			}
					|			//
					|			//autocomplete expects two properties to function correctly: value and label.
					|			//our API endpoint does not hand back objects with those properties, but we can set them...
					|			autocomplete.each(data, function (obj, index) {
					|				obj.label = obj.Name;
					|				obj.value = obj.Symbol;
					|			});
					|			//
					|			//We're also going to store the retrieved data in the autocomplete cache.
					|			//This way if the user searches the same term again, we'll pull it from cache vs. sending another request.
					|			autocomplete.setCache(query, data);
					|			//
					|			//finally, it's time to render out data.
					|			autocomplete.render(data, query);
					|		},
					|		error: function () {
					|			//autocomplete has events already set up if/when an error occurs.
					|			//The events notify screen readers and users of what's going on, so it's important to wire them in.
					|			//you can also add your own handlers to the request.error event.
					|			autocomplete.emit('request.error');
					|		}
					| 	});
					|	//
					|	// lets also set up an abort events
					|	autocomplete.on('request.abort', function () {
					|		//abort our xhr request if possible.
					|		//we can also use the requests/requestnum logic to do our own aborting.
					|		if (xhr) xhr.abort();
					| 	})
					| });

			include ./shared/events
			include ./shared/api
		include ./shared/scripts
		script(type="text/javascript", src="/docs/assets/js/jquery.js")
		script(type="text/javascript", src="/src/js/selectmenu.js")
		script(type="text/javascript", src="/src/js/autocomplete.js")
		script.

			Mk.transitions.enable();

			var inputs = Mk.$('.mk-ac-root'),
				Autocomplete = Mk.get('Autocomplete'),
				autocomplete;

			inputs.each(function (el) {

				if (el.id && el.id === 'remote') {

					autocomplete = new Autocomplete(el, {
						events: {
							'create.tag': function (obj) {
								obj.label = obj.raw.value;
							},
							'request.send': function (query, requestnum) {

								var ac = this;

								$.ajax({
									url: 'http://dev.markitondemand.com/Api/v2/Lookup/jsonp',
									data: {input: query},
									type: 'get',
									dataType: 'jsonp',
									success: function (data) {

										if (ac.requests !== requestnum) {
											ac.abort();
											return;
										}

										ac.each(data, function (obj) {
											obj.label = obj.Name;
											obj.value = obj.Symbol;
										});

										ac.setCache(query, data);
										ac.render(data, query);
									},
									error: function () {
										ac.emit('request.error');
									}
								});
							}
						}
					});
				}
				else if (el.id && el.id === 'categories') {

					autocomplete = new Autocomplete(el, {
						data: [
							{
								label: 'Fun Movies',
								items: [
									{
										label: 'Comedy',
										value: 'Comedy'
									},
									{
										label: 'Disney',
										value: 'Disney'
									},
									{
										label: 'Action',
										value: 'Action'
									},
									{
										label: 'Adventure',
										value: 'Adventure'
									}
								]
							},
							{
								label: 'Intense Movies',
								items: [
									{
										label: 'Horror',
										value: 'Horror'
									},
									{
										label: 'Thriller',
										value: 'Thriller'
									},
									{
										label: 'SyFi',
										value: 'SyFi'
									},
									{
										label: 'Drama',
										value: 'Drama'
									}
								]
							},
							{
								label: 'You Never Knows',
								items: [
									{
										label: 'Fantasy',
										value: 'Fantasy'
									},

									{
										label: 'Romance',
										value: 'Romance'
									},
									{
										label: 'Independent',
										value: 'Independent'
									}
								]
							}
						]
					});
				}
				else {

					autocomplete = new Autocomplete(el, {
						data: [{
							label: 'Comedy',
							value: 'Comedy'
						},
						{
							label: 'Horror',
							value: 'Horror'
						},
						{
							label: 'Thriller',
							value: 'Thriller'
						},
						{
							label: 'Disney',
							value: 'Disney'
						},
						{
							label: 'Action',
							value: 'Action'
						},
						{
							label: 'Adventure',
							value: 'Adventure'
						},
						{
							label: 'Fantasy',
							value: 'Fantasy'
						},
						{
							label: 'SyFi',
							value: 'SyFi'
						},
						{
							label: 'Drama',
							value: 'Drama'
						},
						{
							label: 'Romance',
							value: 'Romance'
						},
						{
							label: 'Independent',
							value: 'Independent'
						}]
					});
				}

				autocomplete
				.on('activate', function (node, keyboard) {

					if (keyboard) {
						var data = this.unflatten(node.attr('data-value'));
						this.input.val(data.value);
					}
				})
				.on('change', function () {
					console.info('selections (raw):', this.selections);
					console.info('value (base64):', this.value)
				})
				.on('submit', function () {
					alert('Submit fired!\nData:\n' + JSON.stringify(this.selections));
				});
			});
